diff --git a/bin/crystal b/bin/crystal
index c901d9b37..a8766b586 100755
--- a/bin/crystal
+++ b/bin/crystal
@@ -141,7 +141,7 @@ CRYSTAL_DIR="$CRYSTAL_ROOT/.build"
 export CRYSTAL_PATH=$CRYSTAL_ROOT/src:lib
 export CRYSTAL_HAS_WRAPPER=true
 
-if [ -x "$CRYSTAL_DIR/crystal" ]; then
+if [ -x "$CRYSTAL_DIR/crystal" ] && false; then
   __warning_msg "Using compiled compiler at \`.build/crystal'"
   exec "$CRYSTAL_DIR/crystal" "$@"
 elif ! command -v crystal > /dev/null; then
diff --git a/src/compiler/crystal/codegen/codegen.cr b/src/compiler/crystal/codegen/codegen.cr
index d28ed3dc4..674aee402 100644
--- a/src/compiler/crystal/codegen/codegen.cr
+++ b/src/compiler/crystal/codegen/codegen.cr
@@ -13,6 +13,8 @@ module Crystal
   MALLOC_ATOMIC_NAME  = "__crystal_malloc_atomic64"
   REALLOC_NAME        = "__crystal_realloc64"
   GET_EXCEPTION_NAME  = "__crystal_get_exception"
+  MALLOC_OFFSETS_NAME = "__crystal_malloc_type_offsets"
+  MALLOC_SIZE_NAME    = "__crystal_malloc_type_size"
 
   class Program
     def run(code, filename = nil, debug = Debug::Default)
@@ -157,6 +159,19 @@ module Crystal
     @main_builder : CrystalLLVMBuilder
     @call_location : Location?
 
+    @malloc_offset_fun : LLVM::Function
+    @malloc_size_fun : LLVM::Function
+    @malloc_types : Set(Type)
+
+    @generate_freestanding = false
+
+    def generate_initialize_fun?
+      if @generate_freestanding
+        return context.fun.name != MAIN_NAME
+      end
+      true
+    end
+
     def initialize(@program : Program, @node : ASTNode, single_module = false, @debug = Debug::Default)
       @single_module = !!single_module
       @abi = @program.target_machine.abi
@@ -171,6 +186,10 @@ module Crystal
       ret_type = @llvm_typer.llvm_return_type(@main_ret_type)
       @main = @llvm_mod.functions.add(MAIN_NAME, [llvm_context.int32, llvm_context.void_pointer.pointer], ret_type)
 
+      @malloc_offset_fun = @llvm_mod.functions.add(MALLOC_OFFSETS_NAME, [llvm_context.int32], llvm_context.int32)
+      @malloc_size_fun = @llvm_mod.functions.add(MALLOC_SIZE_NAME, [llvm_context.int32], llvm_context.int32)
+      @malloc_types = Set(Type).new
+
       if @program.has_flag? "windows"
         @personality_name = "__CxxFrameHandler3"
 
@@ -236,7 +255,8 @@ module Crystal
       # to avoid some memory being allocated with plain malloc.
       codgen_well_known_functions @node
 
-      initialize_argv_and_argc
+      @generate_freestanding = ENV["FREESTANDING"]? == "1"
+      initialize_argv_and_argc unless @generate_freestanding
 
       initialize_simple_class_vars_and_constants
 
@@ -266,14 +286,18 @@ module Crystal
           next if initializer.compile_time_value
           next unless initializer.simple?
 
-          initialize_simple_const(initializer)
+          if generate_initialize_fun?
+            initialize_simple_const(initializer)
+          end
         when ClassVarInitializer
           next unless initializer.node.simple_literal?
 
           class_var = initializer.owner.class_vars[initializer.name]
           next if class_var.thread_local?
 
-          initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          if generate_initialize_fun?
+            initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          end
         end
       end
     end
@@ -345,6 +369,88 @@ module Crystal
         codegen_fun node.real_name, node.external, @program, is_exported_fun: true
       end
 
+      # generate malloc types
+      puts @malloc_types
+      in_main do
+        if (func = @malloc_offset_fun)
+          context.fun = func
+          context.fun.linkage = LLVM::Linkage::Internal
+
+          block = func.basic_blocks.append "entry"
+          position_at_end block
+
+          with_cloned_context do
+            arg = func.params[0]
+
+            current_block = insert_block
+
+            cases = {} of LLVM::Value => LLVM::BasicBlock
+            @malloc_types.each do |type|
+              block = new_block type.to_s
+
+              offsets = BitArray.new 32
+              unless type.packed?
+                ivars = type.all_instance_vars
+                struct_type = llvm_struct_type(type)
+                # puts "#{type} (#{type_id(type)})"
+                ivars.each_with_index do |(name, ivar), idx|
+                  if ivar.type.has_inner_pointers?
+                    offset = @program.instance_offset_of(type.sizeof_type, idx)
+                    bit = offset / (@program.codegen_target.pointer_bit_width / 8)
+                    offsets[bit] = true
+                    # puts " + #{name}, #{ivar.type}, #{offset}"
+                  else
+                    # puts " - #{name}, #{ivar.type}"
+                  end
+                end
+              end
+              # puts "offsets: #{offsets}"
+
+              position_at_end block
+              ret arg.type.const_int(offsets.to_slice.to_unsafe.as(UInt32*).value)
+
+              cases[type_id(type)] = block
+            end
+
+            otherwise = new_block "otherwise"
+            position_at_end otherwise
+            ret arg.type.const_int(0)
+
+            position_at_end current_block
+            builder.switch arg, otherwise, cases
+          end
+        end
+
+        if (func = @malloc_size_fun)
+          context.fun = func
+          context.fun.linkage = LLVM::Linkage::Internal
+
+          block = func.basic_blocks.append "entry"
+          position_at_end block
+
+          with_cloned_context do
+            arg = func.params[0]
+
+            current_block = insert_block
+
+            cases = {} of LLVM::Value => LLVM::BasicBlock
+            @malloc_types.each do |type|
+              block = new_block type.to_s
+              position_at_end block
+              ret arg.type.const_int(@program.instance_size_of(type))
+              cases[type_id(type)] = block
+            end
+
+            otherwise = new_block "otherwise"
+            position_at_end otherwise
+            ret arg.type.const_int(0)
+
+            position_at_end current_block
+            builder.switch arg, otherwise, cases
+          end
+        end
+      end
+
       env_dump = ENV["DUMP"]?
       case env_dump
       when Nil
@@ -932,7 +1038,9 @@ module Crystal
     def codegen_assign(target : Path, value, node)
       const = target.target_const.not_nil!
       if const.used? && !const.simple? && !const.compile_time_value
-        initialize_const(const)
+        if generate_initialize_fun?
+          initialize_const(const)
+        end
       end
       @last = llvm_nil
       false
@@ -946,7 +1054,9 @@ module Crystal
       unless target_type
         if target.is_a?(ClassVar)
           # This is the case of a class var initializer
-          initialize_class_var(target)
+          if generate_initialize_fun?
+            initialize_class_var(target)
+          end
         end
         return false
       end
@@ -1106,7 +1216,9 @@ module Crystal
         end
       when ClassVar
         # This is the case of a class var initializer
-        initialize_class_var(var)
+        if generate_initialize_fun?
+          initialize_class_var(var)
+        end
       end
 
       @last = llvm_nil
@@ -1864,6 +1976,8 @@ module Crystal
       else
         if type.is_a?(InstanceVarContainer) && !type.struct? &&
            type.all_instance_vars.each_value.any? &.type.has_inner_pointers?
+          # TODO: me
+          @malloc_types << type
           @last = malloc struct_type
         else
           @last = malloc_atomic struct_type
diff --git a/src/compiler/crystal/compiler.cr b/src/compiler/crystal/compiler.cr
index 3853d8962..046048dc8 100644
--- a/src/compiler/crystal/compiler.cr
+++ b/src/compiler/crystal/compiler.cr
@@ -4,6 +4,10 @@ require "socket"
 require "colorize"
 require "digest/md5"
 
+lib LibLLVM
+  fun LLVMDeleteFunction(fn : ValueRef)
+end
+
 module Crystal
   @[Flags]
   enum Debug
@@ -310,9 +314,12 @@ module Crystal
         unit.emit(emit, emit_base_filename || output_filename)
       end
 
+      if !ENV["FREESTANDING"]?.nil?
+        LibLLVM.LLVMDeleteFunction llvm_mod.functions["__crystal_main"].to_unsafe
+      end
       target_machine.emit_obj_to_file llvm_mod, object_name
 
-      stdout.puts linker_command(program, object_name, output_filename, nil)
+      # stdout.puts linker_command(program, object_name, output_filename, nil)
     end
 
     private def linker_command(program : Program, object_name, output_filename, output_dir)
