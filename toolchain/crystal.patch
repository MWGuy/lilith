diff --git a/bin/crystal b/bin/crystal
index c901d9b37..a8766b586 100755
--- a/bin/crystal
+++ b/bin/crystal
@@ -141,7 +141,7 @@ CRYSTAL_DIR="$CRYSTAL_ROOT/.build"
 export CRYSTAL_PATH=$CRYSTAL_ROOT/src:lib
 export CRYSTAL_HAS_WRAPPER=true
 
-if [ -x "$CRYSTAL_DIR/crystal" ]; then
+if [ -x "$CRYSTAL_DIR/crystal" ] && false; then
   __warning_msg "Using compiled compiler at \`.build/crystal'"
   exec "$CRYSTAL_DIR/crystal" "$@"
 elif ! command -v crystal > /dev/null; then
diff --git a/src/compiler/crystal/codegen/codegen.cr b/src/compiler/crystal/codegen/codegen.cr
index a1d792d57..7c52ec54a 100644
--- a/src/compiler/crystal/codegen/codegen.cr
+++ b/src/compiler/crystal/codegen/codegen.cr
@@ -241,7 +241,7 @@ module Crystal
         set_current_debug_location Location.new(filename, 1, 1)
       end
 
-      alloca_vars @program.vars, @program
+      #alloca_vars @program.vars, @program
 
       emit_vars_debug_info(@program.vars) if @debug.variables?
     end
@@ -263,14 +263,18 @@ module Crystal
           next if initializer.compile_time_value
           next unless initializer.simple?
 
-          initialize_simple_const(initializer)
+          if context.fun.name != "__crystal_main"
+            initialize_simple_const(initializer)
+          end
         when ClassVarInitializer
           next unless initializer.node.simple_literal?
 
           class_var = initializer.owner.class_vars[initializer.name]
           next if class_var.thread_local?
 
-          initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          if context.fun.name != "__crystal_main"
+            initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          end
         end
       end
     end
@@ -396,6 +400,7 @@ module Crystal
     end
 
     def visit(node : FileNode)
+      #puts context.fun
       with_context(Context.new(context.fun, context.type)) do
         file_module = @program.file_module(node.filename)
         if vars = file_module.vars?
@@ -495,6 +500,7 @@ module Crystal
     end
 
     def visit(node : PointerOf)
+      # puts context.fun.name
       @last = case node_exp = node.exp
               when Var
                 context.vars[node_exp.name].pointer
@@ -929,7 +935,9 @@ module Crystal
     def codegen_assign(target : Path, value, node)
       const = target.target_const.not_nil!
       if const.used? && !const.simple? && !const.compile_time_value
-        initialize_const(const)
+        if context.fun.name != "__crystal_main"
+          initialize_const(const)
+        end
       end
       @last = llvm_nil
       false
@@ -943,7 +951,9 @@ module Crystal
       unless target_type
         if target.is_a?(ClassVar)
           # This is the case of a class var initializer
-          initialize_class_var(target)
+          if context.fun.name != "__crystal_main"
+            initialize_class_var(target)
+          end
         end
         return false
       end
@@ -1103,7 +1113,9 @@ module Crystal
         end
       when ClassVar
         # This is the case of a class var initializer
-        initialize_class_var(var)
+        if context.fun.name != "__crystal_main"
+          initialize_class_var(var)
+        end
       end
 
       @last = llvm_nil
diff --git a/src/compiler/crystal/codegen/const.cr b/src/compiler/crystal/codegen/const.cr
index 78ab68eff..2f0bbcef4 100644
--- a/src/compiler/crystal/codegen/const.cr
+++ b/src/compiler/crystal/codegen/const.cr
@@ -39,7 +39,7 @@ class Crystal::CodeGenVisitor
       request_value do
         accept const.value
       end
-      store @last, global
+      #store @last, global
       global.initializer = @last.type.null
     end
   end