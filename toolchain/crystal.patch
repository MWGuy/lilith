diff --git a/bin/crystal b/bin/crystal
index c901d9b37..a8766b586 100755
--- a/bin/crystal
+++ b/bin/crystal
@@ -141,7 +141,7 @@ CRYSTAL_DIR="$CRYSTAL_ROOT/.build"
 export CRYSTAL_PATH=$CRYSTAL_ROOT/src:lib
 export CRYSTAL_HAS_WRAPPER=true
 
-if [ -x "$CRYSTAL_DIR/crystal" ]; then
+if [ -x "$CRYSTAL_DIR/crystal" ] && false; then
   __warning_msg "Using compiled compiler at \`.build/crystal'"
   exec "$CRYSTAL_DIR/crystal" "$@"
 elif ! command -v crystal > /dev/null; then
diff --git a/src/compiler/crystal/codegen/codegen.cr b/src/compiler/crystal/codegen/codegen.cr
index a1d792d57..a35d0d724 100644
--- a/src/compiler/crystal/codegen/codegen.cr
+++ b/src/compiler/crystal/codegen/codegen.cr
@@ -153,6 +153,8 @@ module Crystal
     @main_builder : CrystalLLVMBuilder
     @call_location : Location?
 
+    @generate_freestanding = false
+
     def initialize(@program : Program, @node : ASTNode, single_module = false, @debug = Debug::Default)
       @single_module = !!single_module
       @abi = @program.target_machine.abi
@@ -233,7 +235,8 @@ module Crystal
       # to avoid some memory being allocated with plain malloc.
       codgen_well_known_functions @node
 
-      initialize_argv_and_argc
+      @generate_freestanding = ENV["FREESTANDING"]? == "1"
+      initialize_argv_and_argc unless @generate_freestanding
 
       initialize_simple_class_vars_and_constants
 
@@ -263,14 +266,18 @@ module Crystal
           next if initializer.compile_time_value
           next unless initializer.simple?
 
-          initialize_simple_const(initializer)
+          if context.fun.name != MAIN_NAME && @generate_freestanding
+            initialize_simple_const(initializer)
+          end
         when ClassVarInitializer
           next unless initializer.node.simple_literal?
 
           class_var = initializer.owner.class_vars[initializer.name]
           next if class_var.thread_local?
 
-          initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          if context.fun.name != MAIN_NAME && @generate_freestanding
+            initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          end
         end
       end
     end
@@ -929,7 +936,9 @@ module Crystal
     def codegen_assign(target : Path, value, node)
       const = target.target_const.not_nil!
       if const.used? && !const.simple? && !const.compile_time_value
-        initialize_const(const)
+        if context.fun.name != MAIN_NAME && @generate_freestanding
+          initialize_const(const)
+        end
       end
       @last = llvm_nil
       false
@@ -943,7 +952,9 @@ module Crystal
       unless target_type
         if target.is_a?(ClassVar)
           # This is the case of a class var initializer
-          initialize_class_var(target)
+          if context.fun.name != MAIN_NAME && @generate_freestanding
+            initialize_class_var(target)
+          end
         end
         return false
       end
@@ -1103,7 +1114,9 @@ module Crystal
         end
       when ClassVar
         # This is the case of a class var initializer
-        initialize_class_var(var)
+        if context.fun.name != MAIN_NAME && @generate_freestanding
+          initialize_class_var(var)
+        end
       end
 
       @last = llvm_nil
diff --git a/src/compiler/crystal/compiler.cr b/src/compiler/crystal/compiler.cr
index 3853d8962..046048dc8 100644
--- a/src/compiler/crystal/compiler.cr
+++ b/src/compiler/crystal/compiler.cr
@@ -4,6 +4,10 @@ require "socket"
 require "colorize"
 require "digest/md5"
 
+lib LibLLVM
+  fun LLVMDeleteFunction(fn : ValueRef)
+end
+
 module Crystal
   @[Flags]
   enum Debug
@@ -310,9 +314,12 @@ module Crystal
         unit.emit(emit, emit_base_filename || output_filename)
       end
 
+      if !ENV["FREESTANDING"]?.nil?
+        LibLLVM.LLVMDeleteFunction llvm_mod.functions["__crystal_main"].to_unsafe
+      end
       target_machine.emit_obj_to_file llvm_mod, object_name
 
-      stdout.puts linker_command(program, object_name, output_filename, nil)
+      # stdout.puts linker_command(program, object_name, output_filename, nil)
     end
 
     private def linker_command(program : Program, object_name, output_filename, output_dir)
