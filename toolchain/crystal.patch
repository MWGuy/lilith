diff --git a/bin/crystal b/bin/crystal
index c901d9b37..a8766b586 100755
--- a/bin/crystal
+++ b/bin/crystal
@@ -141,7 +141,7 @@ CRYSTAL_DIR="$CRYSTAL_ROOT/.build"
 export CRYSTAL_PATH=$CRYSTAL_ROOT/src:lib
 export CRYSTAL_HAS_WRAPPER=true
 
-if [ -x "$CRYSTAL_DIR/crystal" ]; then
+if [ -x "$CRYSTAL_DIR/crystal" ] && false; then
   __warning_msg "Using compiled compiler at \`.build/crystal'"
   exec "$CRYSTAL_DIR/crystal" "$@"
 elif ! command -v crystal > /dev/null; then
diff --git a/src/compiler/crystal/codegen/codegen.cr b/src/compiler/crystal/codegen/codegen.cr
index a1d792d57..8616ab39f 100644
--- a/src/compiler/crystal/codegen/codegen.cr
+++ b/src/compiler/crystal/codegen/codegen.cr
@@ -152,6 +152,9 @@ module Crystal
     @main_module_info : ModuleInfo
     @main_builder : CrystalLLVMBuilder
     @call_location : Location?
+    @malloc_types : Set(Type)
+
+    @generate_freestanding = false
 
     def initialize(@program : Program, @node : ASTNode, single_module = false, @debug = Debug::Default)
       @single_module = !!single_module
@@ -167,6 +170,7 @@ module Crystal
       @main_ret_type = node.type? || @program.nil_type
       ret_type = @llvm_typer.llvm_return_type(@main_ret_type)
       @main = @llvm_mod.functions.add(MAIN_NAME, [llvm_context.int32, llvm_context.void_pointer.pointer], ret_type)
+      @malloc_types = Set(Type).new
 
       if @program.has_flag? "windows"
         @personality_name = "__CxxFrameHandler3"
@@ -233,7 +237,8 @@ module Crystal
       # to avoid some memory being allocated with plain malloc.
       codgen_well_known_functions @node
 
-      initialize_argv_and_argc
+      @generate_freestanding = ENV["FREESTANDING"]? == "1"
+      initialize_argv_and_argc unless @generate_freestanding
 
       initialize_simple_class_vars_and_constants
 
@@ -263,14 +268,18 @@ module Crystal
           next if initializer.compile_time_value
           next unless initializer.simple?
 
-          initialize_simple_const(initializer)
+          if context.fun.name != MAIN_NAME && @generate_freestanding
+            initialize_simple_const(initializer)
+          end
         when ClassVarInitializer
           next unless initializer.node.simple_literal?
 
           class_var = initializer.owner.class_vars[initializer.name]
           next if class_var.thread_local?
 
-          initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          if context.fun.name != MAIN_NAME && @generate_freestanding
+            initialize_class_var(initializer.owner, initializer.name, initializer.meta_vars, initializer.node)
+          end
         end
       end
     end
@@ -342,6 +351,51 @@ module Crystal
         codegen_fun node.real_name, node.external, @program, is_exported_fun: true
       end
 
+      # generate malloc types
+      puts @malloc_types
+      in_main do
+        define_main_function("__crystal_malloc_typeinfo", ([llvm_context.int32]), llvm_context.int32, needs_alloca: true) do |func|
+          with_cloned_context do
+            arg = func.params[0]
+
+            current_block = insert_block
+
+            cases = {} of LLVM::Value => LLVM::BasicBlock
+            @malloc_types.each do |type|
+              block = new_block type.to_s
+
+              offsets = 0
+              unless type.packed?
+                ivars = type.all_instance_vars
+                struct_type = llvm_struct_type(type)
+                # puts type
+                ivars.each_with_index do |(name, ivar), idx|
+                  if ivar.type.has_inner_pointers?
+                    offset = @program.instance_offset_of(type.sizeof_type, idx) / sizeof(Void*)
+                    offsets |= 1 << offset.to_i32
+                    # puts " + #{name}, #{ivar.type}"
+                  else
+                    # puts " - #{name}, #{ivar.type}"
+                  end
+                end
+              end
+
+              position_at_end block
+              ret arg.type.const_int(offsets)
+
+              cases[type_id(type)] = block
+            end
+
+            otherwise = new_block "otherwise"
+            position_at_end otherwise
+            ret arg.type.const_int(0)
+
+            position_at_end current_block
+            builder.switch arg, otherwise, cases
+          end
+        end
+      end
+
       env_dump = ENV["DUMP"]?
       case env_dump
       when Nil
@@ -929,7 +983,9 @@ module Crystal
     def codegen_assign(target : Path, value, node)
       const = target.target_const.not_nil!
       if const.used? && !const.simple? && !const.compile_time_value
-        initialize_const(const)
+        if context.fun.name != MAIN_NAME && @generate_freestanding
+          initialize_const(const)
+        end
       end
       @last = llvm_nil
       false
@@ -943,7 +999,9 @@ module Crystal
       unless target_type
         if target.is_a?(ClassVar)
           # This is the case of a class var initializer
-          initialize_class_var(target)
+          if context.fun.name != MAIN_NAME && @generate_freestanding
+            initialize_class_var(target)
+          end
         end
         return false
       end
@@ -1103,7 +1161,9 @@ module Crystal
         end
       when ClassVar
         # This is the case of a class var initializer
-        initialize_class_var(var)
+        if context.fun.name != MAIN_NAME && @generate_freestanding
+          initialize_class_var(var)
+        end
       end
 
       @last = llvm_nil
@@ -1820,6 +1880,8 @@ module Crystal
       else
         if type.is_a?(InstanceVarContainer) && !type.struct? &&
            type.all_instance_vars.each_value.any? &.type.has_inner_pointers?
+          # TODO: me
+          @malloc_types << type
           @last = malloc struct_type
         else
           @last = malloc_atomic struct_type
diff --git a/src/compiler/crystal/compiler.cr b/src/compiler/crystal/compiler.cr
index 3853d8962..046048dc8 100644
--- a/src/compiler/crystal/compiler.cr
+++ b/src/compiler/crystal/compiler.cr
@@ -4,6 +4,10 @@ require "socket"
 require "colorize"
 require "digest/md5"
 
+lib LibLLVM
+  fun LLVMDeleteFunction(fn : ValueRef)
+end
+
 module Crystal
   @[Flags]
   enum Debug
@@ -310,9 +314,12 @@ module Crystal
         unit.emit(emit, emit_base_filename || output_filename)
       end
 
+      if !ENV["FREESTANDING"]?.nil?
+        LibLLVM.LLVMDeleteFunction llvm_mod.functions["__crystal_main"].to_unsafe
+      end
       target_machine.emit_obj_to_file llvm_mod, object_name
 
-      stdout.puts linker_command(program, object_name, output_filename, nil)
+      # stdout.puts linker_command(program, object_name, output_filename, nil)
     end
 
     private def linker_command(program : Program, object_name, output_filename, output_dir)
